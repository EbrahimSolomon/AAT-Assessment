@page "/manage-events"
@using AAT_Assessment3.Shared;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3 class="text-center mb-4">Manage Events</h3>

    <button class="btn btn-primary mb-3" @onclick="ShowAddEventForm">Add New Event</button>

    @if (successMessage != null)
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (showAddEditForm)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">@((editingEvent?.EventId == 0 ? "Add New" : "Edit") + " Event")</h5>

                <EditForm Model="@editingEvent" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="editingEvent.Name" />
                    </div>

                    <div class="form-group">
                        <label for="date">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="editingEvent.Date" min="@tomorrowDate" />
                        <ValidationMessage For="@(() => editingEvent.Date)" />
                    </div>

                    <div class="form-group">
                        <label for="totalSeats">Total Seats</label>
                        <InputNumber id="totalSeats" class="form-control" @bind-Value="editingEvent.TotalSeats" />
                        <ValidationMessage For="@(() => editingEvent.TotalSeats)" />
                    </div>

                    <div class="form-group">
                        <label for="availableSeats">Available Seats</label>
                        <InputNumber id="availableSeats" class="form-control" @bind-Value="editingEvent.AvailableSeats" />
                        <ValidationMessage For="@(() => editingEvent.AvailableSeats)" />
                    </div>

                    <button type="submit" class="btn btn-success">@((editingEvent?.EventId == 0 ? "Create" : "Update"))</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideAddEditForm">Cancel</button>
                </EditForm>
            </div>
        </div>
    }

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Total Seats</th>
                <th>Available Seats</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in events)
            {
                <tr>
                    <td>@eventItem.Name</td>
                    <td>@eventItem.Date.ToString("yyyy-MM-dd")</td>
                    <td>@eventItem.TotalSeats</td>
                    <td>@eventItem.AvailableSeats</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditEvent(eventItem)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEvent(eventItem.EventId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal Message Box -->
<div class="modal fade" id="validationModal" tabindex="-1" role="dialog" aria-labelledby="validationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="validationModalLabel">Validation Error</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @errorMessage
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Event> events = new List<Event>();
    private Event editingEvent = new Event();
    private bool showAddEditForm = false;
    private string successMessage;
    private string errorMessage;
    private string tomorrowDate = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        await LoadEventsAsync();
    }

    private async Task LoadEventsAsync()
    {
        try
        {
            events = await Http.GetFromJsonAsync<List<Event>>("api/events");
            successMessage = null;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load events: {ex.Message}";
        }
    }

    private void ShowAddEventForm()
    {
        editingEvent = new Event
            {
                Date = DateTime.Now.AddDays(1) // Set default date to tomorrow to avoid prepopulation with a null value
            };
        showAddEditForm = true;
    }

    private void EditEvent(Event eventItem)
    {
        editingEvent = new Event
            {
                EventId = eventItem.EventId,
                Name = eventItem.Name,
                Date = eventItem.Date,
                TotalSeats = eventItem.TotalSeats,
                AvailableSeats = eventItem.AvailableSeats
            };
        showAddEditForm = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editingEvent.EventId == 0)
            {
                await Http.PostAsJsonAsync("api/events", editingEvent);
                successMessage = "Event created successfully.";
            }
            else
            {
                await Http.PutAsJsonAsync($"api/events/{editingEvent.EventId}", editingEvent);
                successMessage = "Event updated successfully.";
            }

            showAddEditForm = false;
            await LoadEventsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save event: {ex.Message}";
        }
    }

    private void HideAddEditForm()
    {
        showAddEditForm = false;
    }

    private async Task DeleteEvent(int eventId)
    {
        try
        {
            await Http.DeleteAsync($"api/events/{eventId}");
            successMessage = "Event deleted successfully.";
            await LoadEventsAsync(); // Refresh the event list
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete event: {ex.Message}";
        }
    }

    private async Task ShowModal()
    {
        // Use the injected IJSRuntime to show the Bootstrap modal
        await JSRuntime.InvokeVoidAsync("eval", "$('#validationModal').modal('show')");
    }

    private void CloseModal()
    {
        errorMessage = null;
    }
}
